@page "/"

@inject ISnackbar Snackbar
@inject DbService _db
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Dashboard - <MudButton OnClick="(e) => fakerData()" Color="Color.Primary" Size="Size.Small">Click to add fake data</MudButton></MudText>
<br />
<MudGrid>
    <MudItem xs="12">
        <MudPaper>
            <MudText Typo="Typo.h6">Average Students age is @averageAge()</MudText>
            <br />
            <MudGrid>
                <MudItem xs="12" md="6" lg="4">
                    <MudCard Outlined="true">
                        <MudCardContent>
                            <MudTable Items="@getStudentsPerCountries()" Dense="false" Hover="true" Bordered="false" Striped="false">
                                <ToolBarContent>
                                    <MudText Typo="Typo.h6">Students Per Country</MudText>
                                </ToolBarContent>
                                <HeaderContent>
                                    <MudTh>Country</MudTh>
                                    <MudTh>Student Count</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd>@context.name</MudTd>
                                    <MudTd>@context.students.Count</MudTd>
                                </RowTemplate>
                                <PagerContent>
                                    <MudTablePager InfoFormat="@($"{infoFormat}")" HorizontalAlignment="HorizontalAlignment.Center" HidePageNumber="false" HidePagination="false" HideRowsPerPage="true" />
                                </PagerContent>
                            </MudTable>

                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" md="6" lg="4">
                    <MudCard Outlined="true">
                        <MudCardContent>
                            <MudTable Items="@getStudentsPerClass()" Dense="false" Hover="true" Bordered="false" Striped="false">
                                <ToolBarContent>
                                    <MudText Typo="Typo.h6">Students Per Class</MudText>
                                </ToolBarContent>
                                <HeaderContent>
                                    <MudTh>Country</MudTh>
                                    <MudTh>Student Count</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd>@context.class_name</MudTd>
                                    <MudTd>@context.students.Count</MudTd>
                                </RowTemplate>
                                <PagerContent>
                                    <MudTablePager InfoFormat="@($"{infoFormat}")" HorizontalAlignment="HorizontalAlignment.Center" HidePageNumber="false" HidePagination="false" HideRowsPerPage="true" />
                                </PagerContent>
                            </MudTable>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>

        </MudPaper>
    </MudItem>
</MudGrid>




@code {

    private string infoFormat = "{first_item}-{last_item} of {all_items}";

    //List Variables
    List<countries> countries = new List<countries>();
    List<students> students = new List<students>();
    List<classes> classes = new List<classes>();

    public List<countries> getStudentsPerCountries()
    {
        countries = _db.StudentsPerCountry();
        return countries;
    }
    public List<classes> getStudentsPerClass()
    {
        classes = _db.StudentsPerClass();
        return classes;
    }
    public List<students> getStudents()
    {
        students = _db.GetStudents();
        return students;
    }


    protected override async Task OnInitializedAsync()
    {
        getStudents();
        getStudentsPerClass();
        getStudentsPerCountries();

    }

    private async Task fakerData()
    {
        //Faker
        List<countries> randomCountries = getStudentsPerCountries();
        List<classes> randomClasses = getStudentsPerClass();
        countries country = new countries();
        country.name = Faker.Country.Name();
        classes course = new classes();
        course.class_name = Faker.Company.Name();

        if (randomClasses.Count > 0 && randomCountries.Count > 0)
        {
            int counter = 10;

            List<students> students = new List<students>();
            while (counter > 0)
            {
                Random rand = new Random();
                int toSkipc = rand.Next(1, randomCountries.Count);
                countries randomCountry = randomCountries.OrderBy(r => Guid.NewGuid()).Skip(toSkipc).Take(1).FirstOrDefault();

                int toSkips = rand.Next(1, randomClasses.Count);
                classes randomClass = randomClasses.OrderBy(r => Guid.NewGuid()).Skip(toSkips).Take(1).FirstOrDefault();

                students student = new students();
                student.name = Faker.Name.FullName();
                student.date_of_birth = Faker.DateTimeFaker.BirthDay();
                student.country_id = randomCountry.Id;
                student.class_id = randomClass.Id;
                --counter;
                students.Add(student);

                await _db.AddStudent(student);
            }
        }

        await _db.AddClass(course);
        await _db.AddCountry(country);
    }

    public decimal? averageAge()
    {
        decimal? average = 0;
        decimal totalAge = 0;

        int studentCount = students.Count;
        if (studentCount > 0)
        {
            List<decimal> studentAges = new List<decimal>();

            foreach (var item in students)
            {
                decimal age = DateTime.Today.Year - item.date_of_birth.Value.Year;
                studentAges.Add(age);
                totalAge = totalAge + age;
            }

            average = totalAge / studentCount;
        }


        return average;

    }

} 